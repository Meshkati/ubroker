// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/ubroker.proto

package ubroker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Body                 []byte   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a5bc08b618fc5f, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Delivery struct {
	Message              *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Delivery) Reset()         { *m = Delivery{} }
func (m *Delivery) String() string { return proto.CompactTextString(m) }
func (*Delivery) ProtoMessage()    {}
func (*Delivery) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a5bc08b618fc5f, []int{1}
}

func (m *Delivery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Delivery.Unmarshal(m, b)
}
func (m *Delivery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Delivery.Marshal(b, m, deterministic)
}
func (m *Delivery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delivery.Merge(m, src)
}
func (m *Delivery) XXX_Size() int {
	return xxx_messageInfo_Delivery.Size(m)
}
func (m *Delivery) XXX_DiscardUnknown() {
	xxx_messageInfo_Delivery.DiscardUnknown(m)
}

var xxx_messageInfo_Delivery proto.InternalMessageInfo

func (m *Delivery) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Delivery) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FetchRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchRequest) Reset()         { *m = FetchRequest{} }
func (m *FetchRequest) String() string { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()    {}
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a5bc08b618fc5f, []int{2}
}

func (m *FetchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchRequest.Unmarshal(m, b)
}
func (m *FetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchRequest.Marshal(b, m, deterministic)
}
func (m *FetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRequest.Merge(m, src)
}
func (m *FetchRequest) XXX_Size() int {
	return xxx_messageInfo_FetchRequest.Size(m)
}
func (m *FetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRequest proto.InternalMessageInfo

type AcknowledgeRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcknowledgeRequest) Reset()         { *m = AcknowledgeRequest{} }
func (m *AcknowledgeRequest) String() string { return proto.CompactTextString(m) }
func (*AcknowledgeRequest) ProtoMessage()    {}
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a5bc08b618fc5f, []int{3}
}

func (m *AcknowledgeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcknowledgeRequest.Unmarshal(m, b)
}
func (m *AcknowledgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcknowledgeRequest.Marshal(b, m, deterministic)
}
func (m *AcknowledgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcknowledgeRequest.Merge(m, src)
}
func (m *AcknowledgeRequest) XXX_Size() int {
	return xxx_messageInfo_AcknowledgeRequest.Size(m)
}
func (m *AcknowledgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcknowledgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcknowledgeRequest proto.InternalMessageInfo

func (m *AcknowledgeRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReQueueRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReQueueRequest) Reset()         { *m = ReQueueRequest{} }
func (m *ReQueueRequest) String() string { return proto.CompactTextString(m) }
func (*ReQueueRequest) ProtoMessage()    {}
func (*ReQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9a5bc08b618fc5f, []int{4}
}

func (m *ReQueueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReQueueRequest.Unmarshal(m, b)
}
func (m *ReQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReQueueRequest.Marshal(b, m, deterministic)
}
func (m *ReQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReQueueRequest.Merge(m, src)
}
func (m *ReQueueRequest) XXX_Size() int {
	return xxx_messageInfo_ReQueueRequest.Size(m)
}
func (m *ReQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReQueueRequest proto.InternalMessageInfo

func (m *ReQueueRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "ubroker.Message")
	proto.RegisterType((*Delivery)(nil), "ubroker.Delivery")
	proto.RegisterType((*FetchRequest)(nil), "ubroker.FetchRequest")
	proto.RegisterType((*AcknowledgeRequest)(nil), "ubroker.AcknowledgeRequest")
	proto.RegisterType((*ReQueueRequest)(nil), "ubroker.ReQueueRequest")
}

func init() { proto.RegisterFile("api/ubroker.proto", fileDescriptor_c9a5bc08b618fc5f) }

var fileDescriptor_c9a5bc08b618fc5f = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xc9, 0x70, 0xab, 0xbc, 0x8d, 0xe1, 0x1e, 0xa8, 0x63, 0x43, 0x18, 0x45, 0x70, 0x7a,
	0x68, 0x65, 0xc3, 0x8b, 0x37, 0x87, 0xee, 0x26, 0x68, 0x8f, 0xde, 0x96, 0xf5, 0x99, 0x86, 0xb6,
	0xa6, 0xb6, 0x89, 0xb2, 0xff, 0xdb, 0x3f, 0x40, 0xcc, 0xda, 0x30, 0x19, 0xbb, 0xbd, 0x3c, 0xbe,
	0x2f, 0xdf, 0x2f, 0x1f, 0x81, 0xc1, 0xaa, 0x90, 0xa1, 0xe1, 0xa5, 0x4a, 0xa9, 0x0c, 0x8a, 0x52,
	0x69, 0x85, 0x5e, 0x7d, 0x1c, 0x8d, 0x85, 0x52, 0x22, 0xa3, 0xd0, 0xae, 0xb9, 0x79, 0x0f, 0x29,
	0x2f, 0xf4, 0x66, 0xab, 0xf2, 0x2f, 0xc0, 0x7b, 0xa6, 0xaa, 0x5a, 0x09, 0x42, 0x84, 0x23, 0xae,
	0xe2, 0xcd, 0x90, 0x4d, 0xd8, 0xb4, 0x17, 0xd9, 0xd9, 0x5f, 0xc2, 0xf1, 0x23, 0x65, 0xf2, 0x8b,
	0xca, 0x0d, 0xde, 0x80, 0x97, 0x6f, 0xa5, 0x56, 0xd2, 0x9d, 0x9d, 0x04, 0x4d, 0x62, 0x7d, 0x45,
	0xd4, 0x08, 0xb0, 0x0f, 0x2d, 0x19, 0x0f, 0x5b, 0x13, 0x36, 0x6d, 0x47, 0x2d, 0x19, 0xfb, 0x7d,
	0xe8, 0x2d, 0x49, 0xaf, 0x93, 0x88, 0x3e, 0x0d, 0x55, 0xda, 0xbf, 0x04, 0x7c, 0x58, 0xa7, 0x1f,
	0xea, 0x3b, 0xa3, 0x58, 0x50, 0xbd, 0xad, 0x5d, 0xcc, 0xb9, 0x26, 0xd0, 0x8f, 0xe8, 0xd5, 0x90,
	0x39, 0xa4, 0x98, 0xfd, 0x30, 0xe8, 0x2c, 0x2c, 0x03, 0xde, 0x41, 0xdb, 0x46, 0xe0, 0xa9, 0xc3,
	0xda, 0x8d, 0x1c, 0x0d, 0xdc, 0xba, 0x79, 0xd1, 0x94, 0xdd, 0x32, 0x5c, 0x40, 0x77, 0x87, 0x04,
	0xc7, 0x4e, 0xb5, 0xcf, 0x37, 0x3a, 0x0b, 0xb6, 0x55, 0x06, 0x4d, 0x95, 0xc1, 0xd3, 0x5f, 0x95,
	0x78, 0x0f, 0x5e, 0xcd, 0x89, 0xe7, 0xce, 0xff, 0x9f, 0xfc, 0xa0, 0x77, 0x0e, 0xde, 0x8b, 0xe1,
	0x99, 0xac, 0x12, 0xdc, 0xeb, 0xf3, 0x90, 0x69, 0x71, 0xfd, 0x76, 0x25, 0xa4, 0x4e, 0x0c, 0x0f,
	0xd6, 0x2a, 0x0f, 0x73, 0xaa, 0x92, 0x74, 0xa5, 0xdd, 0x07, 0x08, 0x8b, 0x54, 0x34, 0x33, 0xef,
	0x58, 0xeb, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x91, 0x86, 0x85, 0xc0, 0x22, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerClient interface {
	// Fetch should return a single Delivery per FetchRequest.
	// Should return:
	//     Unavailable: If broker has been closed
	Fetch(ctx context.Context, opts ...grpc.CallOption) (Broker_FetchClient, error)
	// Acknowledge a message
	// Should return:
	//     OK: on success
	//     Unavailable: If broker has been closed
	//     InvalidArgument: If requested ID is invalid
	Acknowledge(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ReQueue a message
	//     OK: on success
	//     Unavailable: If broker has been closed
	//     InvalidArgument: If requested ID is invalid
	ReQueue(ctx context.Context, in *ReQueueRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publish message to Queue
	//     OK: on success
	//     Unavailable: If broker has been closed
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Fetch(ctx context.Context, opts ...grpc.CallOption) (Broker_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Broker_serviceDesc.Streams[0], "/ubroker.Broker/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerFetchClient{stream}
	return x, nil
}

type Broker_FetchClient interface {
	Send(*FetchRequest) error
	Recv() (*Delivery, error)
	grpc.ClientStream
}

type brokerFetchClient struct {
	grpc.ClientStream
}

func (x *brokerFetchClient) Send(m *FetchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerFetchClient) Recv() (*Delivery, error) {
	m := new(Delivery)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Acknowledge(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ubroker.Broker/Acknowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) ReQueue(ctx context.Context, in *ReQueueRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ubroker.Broker/ReQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ubroker.Broker/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
type BrokerServer interface {
	// Fetch should return a single Delivery per FetchRequest.
	// Should return:
	//     Unavailable: If broker has been closed
	Fetch(Broker_FetchServer) error
	// Acknowledge a message
	// Should return:
	//     OK: on success
	//     Unavailable: If broker has been closed
	//     InvalidArgument: If requested ID is invalid
	Acknowledge(context.Context, *AcknowledgeRequest) (*empty.Empty, error)
	// ReQueue a message
	//     OK: on success
	//     Unavailable: If broker has been closed
	//     InvalidArgument: If requested ID is invalid
	ReQueue(context.Context, *ReQueueRequest) (*empty.Empty, error)
	// Publish message to Queue
	//     OK: on success
	//     Unavailable: If broker has been closed
	Publish(context.Context, *Message) (*empty.Empty, error)
}

// UnimplementedBrokerServer can be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (*UnimplementedBrokerServer) Fetch(srv Broker_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (*UnimplementedBrokerServer) Acknowledge(ctx context.Context, req *AcknowledgeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acknowledge not implemented")
}
func (*UnimplementedBrokerServer) ReQueue(ctx context.Context, req *ReQueueRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReQueue not implemented")
}
func (*UnimplementedBrokerServer) Publish(ctx context.Context, req *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Fetch(&brokerFetchServer{stream})
}

type Broker_FetchServer interface {
	Send(*Delivery) error
	Recv() (*FetchRequest, error)
	grpc.ServerStream
}

type brokerFetchServer struct {
	grpc.ServerStream
}

func (x *brokerFetchServer) Send(m *Delivery) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerFetchServer) Recv() (*FetchRequest, error) {
	m := new(FetchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Acknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Acknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubroker.Broker/Acknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Acknowledge(ctx, req.(*AcknowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_ReQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).ReQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubroker.Broker/ReQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).ReQueue(ctx, req.(*ReQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ubroker.Broker/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ubroker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acknowledge",
			Handler:    _Broker_Acknowledge_Handler,
		},
		{
			MethodName: "ReQueue",
			Handler:    _Broker_ReQueue_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Broker_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _Broker_Fetch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/ubroker.proto",
}
